Date : 20-04-2025

Operating System:
-Concept
-Components						*Shell Programming

Types: MS-DOS [CLI]
       MAC
       Windows
       UNIX(Developed in C)/LINUX(Redhat)

In a computer system, there are four major components:

-Hardware ‚Äì Provides basic computing resources.
-Operating System (OS) ‚Äì Controls and coordinates hardware use.
-Application Software ‚Äì Defines how hardware is used to solve user problems.
-Users

User(s)--> Application Software---> OS--->Computer Hardware


Types of OS:
1) Batch Processing O/S 				P1 Java   |
  Here : P1+P3						P2 C/C++  |--->>		|CPU|
	will be executed together as a batch		P3 Java   |
							P4 Python |
2) Time Sharing O/S
Here equal time slots are alloted to each program, big or small.

3) Real Time Operating System[RTOS]
-No waiting time,because every system has to perform at the same time.

4) Multi-Programming O/S
-Multiple programs will go to the main memory for execution. 	**CPU can execute only one program at a time.


			Tasks
			  |
			  V
			Program 1,Program 2....
			  |
			  V
			Process 1.... Process 2....
			  |
			  V
			Thread(smallest)


-Multitasking O/S
-Multiprogramming O/S
-Multiprocessing O/S
-Multithreading O/S


**Distributed O/S
A distributed operating system (DOS) is a type of operating system that manages a network of independent computers as a single, unified system. It allows multiple computers to work together seamlessly, providing a single interface to users and applications while hiding the complexity of the underlying network.

***Types of O/S(read from book)


What Should an Effective OS Do?

An effective OS should be able to:

-Act as a Command Interpreter: Provide a user-friendly environment.
-Allow communication with other users.
-Facilitate directory/file creation with security.
-Provide routines for handling I/O programming.
-Provide access to compilers (translating high-level languages to machine code).
-Provide a loader program to load compiled code into memory for execution.
-Ensure fair CPU usage among active processes.
-Handle storage and device allocation.
-Provide long-term file storage.
-Enable resource sharing among users and ensure security from unauthorized use.


Functions of OS :

-Process management
-Memory Management
	-Secondary Memory Management
-Input Output Management(I/O Mangement)
-File Management
-Protection and security
-Networking Management
-Command Management.

											***Theory of O/S
									   		Commands(Linux)
									   		Shell Scripting


Commands:

$ date
$ cal   Eg. $ cal 2009
$ mkdir -create a new directory
$ rmdir	-remove directory
$ cp  Eg. $ cp C:/stu/BCA2/ D:/stu/BCA2
$ cmp 	Eg. $cmp file1.txt file2.txt		Q) Difference between cmp and diff cmd ?
$ diff Eg. $diff file1.txt file2.txt

 	$ cmp file1.txt file2.txt 	|
	$ diff file1.txt file2.txt	| Try this out

üëâ Use cmp when you just want to know if two files are the same, especially for binary files.

üëâ Use diff when you want to see exactly what‚Äôs different, especially for text/code files.


Date: 21-04-2025

$ ls -to show the list of  files/folder
  ls -l
  ls -a
  ls -lrth
$ pwd -present working directory
$ cd -Change directory
 eg: $ cd C:/Course/BCA (we were previously in C:/Student and there are two folders BCA and MCA inside Course folder inside Student Folder)
		/ -this is called root
		root user a.k.a the admin

user group others (4-read 2-write 1-execute)
 7     7     7	 : All permission provide (4+2+1)
rwx   rwx   rwx

Done using: 
$ chmod		eg : chmod 762 file1.txt
$ mv -move
$ cp -copy	eg: $ cp C:/DIR1/Student.txt D:/BCA

FILE CREATION:
$ touch
$ cat eg. cat>> file1.txt	cat>> file2.txt
		Hi		India
		Hello		is
		Bye		my country.
to display the contents :eg - cat file1.txt {and ctrl+ Z: save and exit}
$ vi eg. vi file1.txt


$ head	eg- head -n 5 filename.txt
$ tail  eg- tail -n 20 filename.txt 
$ more  eg- more filename.txt[ Displays content one screen at a time. üîπ Commands inside more:

SPACE ‚Äì Next page

ENTER ‚Äì Next line

q ‚Äì Quit]

$ less eg-less filename.txt [Better than more (scroll forward and backward)
Also paginates but allows scrolling back.Commands inside less:

SPACE ‚Äì Next page

b ‚Äì Back a page

/pattern ‚Äì Search forward

?pattern ‚Äì Search backward

q ‚Äì Quit]
$ man :mannual for any command eg- man ls

$ patch  - The patch command applies changes (diffs) to files, usually used for updating source code or text files.
	When someone sends you a .patch or .diff file containing differences (created using diff), you can apply it using patch.
	üîπ Step-by-Step Example:
1Ô∏è‚É£ Create two versions of a file:
# Original file
echo -e "Hello\nWorld" > original.txt

# Modified version
echo -e "Hi\nWorld" > modified.txt

2Ô∏è‚É£ Create a patch file using diff:
diff -u original.txt modified.txt > change.patch

üìÑ change.patch now contains:
--- original.txt
+++ modified.txt
@@ -1,2 +1,2 @@
-Hello
+Hi
 World

3Ô∏è‚É£ Apply the patch using patch:
patch original.txt < change.patch

‚úÖ Now original.txt is modified to match modified.txt.


22-04-2025

$ print |
$ echo  | To display messages 
$ wall  |

$ps 
	this will provide the pid(process identification )
	then use:
	$ kill -9 <pid> eg: $ kill -9 1001 

To identify the users:
$ who
$ whoami
$ w

$ ipconfig /$ ifconfig
$ du (disk utilization)
$ df (disk)

$ grep (for pattern search,vv imp)
	$ grep -i "TEXT" filename.txt (Ignore case)
	$ grep -n "TEXT" filename.txt
	
	Q : To display all the lines start with "Hello".
	$ grep "^Hello" file1.txt
	Q : To display all the lines ending with "Hello".
	$ grep "Hello$" file1.txt
	$ grep -i "Hello$" file1.txt (ignore cases)

	[Q] Match all the line having letter a,b,c,d and e.
	$ grep "[a-e]" file1.txt
	$ grep "[a-z]" file1.txt
	[Q] Matchthe lines having vowels [a,e,i,o,u]
	$ grep "[aeiou]" file1.txt
	[Q]Doesn't have any vowels
	$ grep "[^aeiou]" file1.txt

Q Match all the lines that start with a digit.
	$ grep "*[0-9]" file1.txt

	***
	$grep -i "China" country.txt>>output.txt (>> means redirection)

$ sed 
$ awk .

To display more than 1 file at the same time:
$cat file1.txt file2.txt 

<<<<<<< HEAD
Date:25-04-2025

C:/IGNOU/BCA2/student_details.txt
$mkdir IGNOU
ls
$cd IGNOU
$ls
$cat > student_details.txt
	ram
	shyam
	bhalla
	bushra

$cat student.txt
Q1) How to delete a folder BCA2 ? Will it delete ? 
Ans: No, because it already contains contents.
Q3)Write a shell script program to find all the country starting with C from the list of country .txt file .
Q4) Find the greatest between two numbers ?

echo "Enter the first number"
read num1
echo "Enter second number"
read num2
if [ "$num1" -gt "$num2" ]; then
    echo "$num1 is greater than $num2"
else
    echo "$num2 is greater than $num1"
fi

Q4)Eligible for vote or not ?

echo "Enter your age"
read age
if [$age -gt 18];then
	echo "Person is eligible for voting"
else
	echo "Not eligible for voting"
fi

Q5) Even or odd ?
=======

Shell Scripting

It is designed to execute Unix/Linux Programs
Types of Shell :
1)Bourne Shell
2) C Shell
3) Korn SHELL

Vi Editor :King of Al editors

Syntax:
Vi sample.sh
--press i to insert
Echo ‚ÄúInput Your Name‚Äù
read name
echo ‚Äúhello,Rawaque‚Äù

Step 4: Esc:wq save and exit

To see the program :
Cat sample.sh

To execute:
bash filename.sh

Q) Input your name and display it.
Q) Input your name, enrolment number ,program code and display it.

*** 
Echo ‚ÄúHello,$name‚Äù ---to store and disply the name in the variable name

Eg: vi test1.sh
echo ‚ÄùMy current working directory is $pwd‚Äù
Esc:wq
To show: cat test1.sh


Date :24-04-2025

Q) Write a shell scripting program to find a particular word within a file.
Q) Write a shell program to display all the file having a word ‚ÄúIndia‚Äù ?
grep -rli ‚ÄúTEXT‚Äù .
Q) To find the total number of words in a file.[wc -w filename: Total no of words]
Q) To display all .txt file
$ls *.txt
Q) Write a shell script to add two numbers
vi sum.sh
echo ‚ÄúEnter the first number‚Äù
read num1
echo ‚ÄúEnter the second number‚Äù
read num2
sum=$(expr  $num1 + $num2)
echo ‚Äúsum of the number = $sum‚Äù


											   
>>>>>>> 09dabd5a08cfd0f4666c5617ec106b86ce2db63e
